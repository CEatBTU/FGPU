//===---- FgpuISelDAGToDAG.h - A Dag to Dag Inst Selector for Fgpu --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the FGPU target.
//
//===----------------------------------------------------------------------===//

#ifndef FGPUISELDAGTODAG_H
#define FGPUISELDAGTODAG_H


#include "Fgpu.h"
#include "FgpuSubtarget.h"
#include "FgpuTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// FgpuDAGToDAGISel - FGPU specific code to select FGPU machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace llvm {

class FgpuDAGToDAGISel : public SelectionDAGISel {
public:
  explicit FgpuDAGToDAGISel(FgpuTargetMachine &TM)
      : SelectionDAGISel(TM), Subtarget(nullptr) {}

  // Pass Name
  const char *getPassName() const override {
    return "FGPU DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override;

protected:
  // SDNode *getGlobalBaseReg();

  /// Keep a pointer to the FgpuSubtarget around so that we can make the right
  /// decision when generating code for different targets.
  const FgpuSubtarget *Subtarget;

private:
  // Include the pieces autogenerated from the target description.
  #include "FgpuGenDAGISel.inc"

  /// getTargetMachine - Return a reference to the TargetMachine, casted
  /// to the target-specific type.
  const FgpuTargetMachine &getTargetMachine() {
    return static_cast<const FgpuTargetMachine &>(TM);
  }

  SDNode *Select(SDNode *N) override;

  // Complex Pattern.
  bool selectFrameAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);


  // getImm - Return a target constant with the specified value.
  inline SDValue getImm(const SDNode *Node, unsigned Imm) {
    return CurDAG->getTargetConstant(Imm, SDLoc(Node), Node->getValueType(0));
  }

  virtual void processFunctionAfterISel(MachineFunction &MF) = 0;

  bool SelectInlineAsmMemoryOperand(const SDValue &Op,
                                    unsigned ConstraintID,
                                    std::vector<SDValue> &OutOps) override;
};

/// createFgpuISelDag - This pass converts a legalized DAG into a
/// FGPU-specific DAG, ready for instruction scheduling.
FunctionPass *createFgpuISelDag(FgpuTargetMachine &TM);

}

#endif
