//===-- FgpuSubtarget.h - Define Subtarget for the Fgpu ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Fgpu specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef FGPUSUBTARGET_H
#define FGPUSUBTARGET_H


#include "FgpuFrameLowering.h"
#include "FgpuISelLowering.h"
#include "FgpuInstrInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Target/TargetSelectionDAGInfo.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "FgpuGenSubtargetInfo.inc"


//@1
namespace llvm {
class StringRef;

class FgpuTargetMachine;

class FgpuSubtarget : public FgpuGenSubtargetInfo {
  virtual void anchor();

public:


protected:
  enum FgpuArchEnum {
    // Fgpu32II,
    Fgpu32
  };

  // Fgpu architecture version
  FgpuArchEnum FgpuArchVersion;

  // IsSoftFloat - The target does not support any floating point instructions.
  bool IsSoftFloat;
  bool HardFloatUnits;
  
  // IsLittle - The target is Little Endian
  bool IsLittle;

  bool EnableOverflow;


  InstrItineraryData InstrItins;


  const FgpuTargetMachine &TM;

  Triple TargetTriple;

  const TargetSelectionDAGInfo TSInfo;

  std::unique_ptr<const FgpuInstrInfo> InstrInfo;
  std::unique_ptr<const FgpuFrameLowering> FrameLowering;
  std::unique_ptr<const FgpuTargetLowering> TLInfo;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  FgpuSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                bool little, const FgpuTargetMachine &_TM);

//- Vitual function, must have
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool hasFgpu32() const { return FgpuArchVersion >= Fgpu32; }
  bool isFgpu32() const { return FgpuArchVersion == Fgpu32; }

  bool useSoftFloat() const { return IsSoftFloat; }
  bool hasHardFloatUnits() const { return HardFloatUnits; }
  /// Features related to the presence of specific instructions.
  bool enableOverflow() const { return EnableOverflow; }
  bool disableOverflow() const { return !EnableOverflow; }

  const InstrItineraryData *getInstrItineraryData() const { return &InstrItins; }

  unsigned stackAlignment() const { return 8; }

  FgpuSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const TargetMachine &TM);

  const FgpuInstrInfo *getInstrInfo() const { return InstrInfo.get(); }
  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }
  const FgpuRegisterInfo *getRegisterInfo() const {
    return &InstrInfo->getRegisterInfo();
  }
  const FgpuTargetLowering *getTargetLowering() const { return TLInfo.get(); }
};
} // End llvm namespace
#endif
